#!/usr/bin/env bash

set -euo pipefail

# =============================================================================
# Configuration
# =============================================================================

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly HOMEBREW_DIR="chezmoi/dot_application-config/homebrew"
readonly FORMULA_FILE="${HOMEBREW_DIR}/brew-formula.txt"
readonly CASKS_FILE="${HOMEBREW_DIR}/brew-casks.txt"
readonly MAS_FILE="${HOMEBREW_DIR}/mas-list.txt"

# Color codes
readonly GREEN='\033[0;32m'
readonly RED='\033[0;31m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m'

# =============================================================================
# Utility Functions
# =============================================================================

log_info() {
    echo -e "${GREEN}${1}${NC}"
}

log_warning() {
    echo -e "${YELLOW}${1}${NC}"
}

log_error() {
    echo -e "${RED}${1}${NC}"
}

spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c] " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

is_empty_or_comment() {
    local line="$1"
    [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]]
}

install_with_spinner() {
    local name="$1"
    local install_cmd="$2"

    echo -n "Installing $name..."
    eval "$install_cmd" > /dev/null 2>&1 &
    spinner $!
    wait $!

    if [[ $? -eq 0 ]]; then
        echo -e " ${GREEN}✅${NC}"
        return 0
    else
        echo -e " ${RED}❌${NC}"
        return 1
    fi
}

# =============================================================================
# Package Management Functions
# =============================================================================

check_and_install_homebrew() {
    if ! command -v brew &> /dev/null; then
        log_warning "Homebrew not found. Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    else
        log_info "Homebrew is already installed."
    fi
}

check_and_install_mas() {
    if ! command -v mas &> /dev/null; then
        log_warning "mas not found. Installing mas..."
        brew install mas
    fi
}

process_package_file() {
    local file_path="$1"
    local package_type="$2"
    local check_cmd_template="$3"
    local install_cmd_template="$4"

    if [[ ! -f "$file_path" ]]; then
        if [[ "$package_type" == "formula" ]]; then
            log_error "Error: $file_path not found!"
            exit 1
        else
            log_warning "${package_type^} file not found at $file_path, skipping ${package_type} installation."
            return 0
        fi
    fi

    echo "Checking ${package_type}s..."

    local missing_items=()
    local all_items=()

    while IFS= read -r line || [[ -n "$line" ]]; do
        is_empty_or_comment "$line" && continue

        local item_id item_name check_cmd

        if [[ "$package_type" == "mas" ]]; then
            item_id=$(echo "$line" | awk '{print $1}')
            item_name=$(echo "$line" | awk '{$1=""; print $0}' | sed 's/^ *//')
            check_cmd=$(printf "$check_cmd_template" "$item_id")
        else
            item_id="$line"
            item_name="$line"
            check_cmd=$(printf "$check_cmd_template" "$item_id")
        fi

        all_items+=("$item_id")

        if eval "$check_cmd" &> /dev/null; then
            printf "${GREEN}✅ ${NC}%s\n" "$item_name"
        else
            printf "${RED}◼️  ${NC}%s\n" "$item_name"
            missing_items+=("$item_id")
        fi
    done < "$file_path"

    echo

    if [[ ${#missing_items[@]} -eq 0 ]]; then
        log_info "All ${package_type}s are already installed."
        return 0
    fi

    log_warning "Installing ${package_type}s: ${missing_items[*]}"

    for item_id in "${missing_items[@]}"; do
        local install_cmd item_name
        install_cmd=$(printf "$install_cmd_template" "$item_id")

        if [[ "$package_type" == "mas" ]]; then
            item_name=$(grep "^$item_id" "$file_path" | awk '{$1=""; print $0}' | sed 's/^ *//')
        else
            item_name="$item_id"
        fi

        install_with_spinner "$item_name" "$install_cmd"
    done
}

install_formulas() {
    process_package_file "$FORMULA_FILE" "formula" \
        "brew list %s" \
        "brew install %s"
}

install_casks() {
    process_package_file "$CASKS_FILE" "cask" \
        "brew list --cask %s" \
        "brew install --cask %s"
}

install_mas_apps() {
    check_and_install_mas
    process_package_file "$MAS_FILE" "mas" \
        "mas list | grep -q '^%s'" \
        "mas install %s"
}

# =============================================================================
# Main Installation Flow
# =============================================================================

main() {
    echo "Installing Xcode Command Line Tools"
    xcode-select --install || true

    check_and_install_homebrew
    install_formulas
    install_casks
    install_mas_apps

    log_info "Setup completed."
}

# =============================================================================
# Script Execution
# =============================================================================

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
